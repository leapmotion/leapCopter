// Generated by CoffeeScript 1.6.3
(function() {
  var Parrot, arDrone, controller, parrot, testMode;

  arDrone = require('ar-drone');

  controller = new Leap.Controller();

  controller.connect();

  controller.use('handHolding');

  controller.use('handActive');

  controller.use('handEntry');

  testMode = true;

  document.getElementById('test-mode').innerHTML = testMode;

  window.visualizer = document.getElementById('copter');

  visualizer.top = function(n) {
    n || (n = 0);
    return this.style.top = (window.innerHeight / 2) + n + 'px';
  };

  visualizer.left = function(n) {
    n || (n = 0);
    return this.style.left = (window.innerWidth / 2) + n + 'px';
  };

  visualizer.top();

  visualizer.left();

  Parrot = (function() {
    function Parrot() {
      this.state = 'grounded';
      this.client = arDrone.createClient();
      this.scaleFactor = 0.5;
    }

    Parrot.prototype.takeOff = function() {
      if (this.state !== 'grounded') {
        return;
      }
      this.state = 'flying';
      if (!testMode) {
        this.client.takeoff();
      }
      console.log('takeOff');
      return visualizer.className = 'active';
    };

    Parrot.prototype.land = function() {
      if (this.state !== 'flying') {
        return;
      }
      console.log('land');
      this.state = 'grounded';
      if (!testMode) {
        this.client.land();
      }
      return visualizer.className = '';
    };

    Parrot.prototype.stop = function() {
      if (!testMode) {
        return this.client.stop();
      }
    };

    Parrot.prototype.setSpeed = function(pitch, roll) {
      var pitchPercent, rollPercent;
      pitchPercent = Math.abs(pitch / (Math.PI / 2)) * this.scaleFactor;
      if (pitch < 0) {
        if (!testMode) {
          this.client.front(pitchPercent);
        }
        visualizer.top(pitchPercent * -100);
      } else {
        if (!testMode) {
          this.client.back(pitchPercent);
        }
        visualizer.top(pitchPercent * 100);
      }
      rollPercent = Math.abs(roll / (Math.PI / 2)) * this.scaleFactor;
      if (roll > 0) {
        if (!testMode) {
          this.client.left(rollPercent);
        }
        return visualizer.left(rollPercent * -100);
      } else {
        if (!testMode) {
          this.client.right(rollPercent);
        }
        return visualizer.left(rollPercent * 100);
      }
    };

    return Parrot;

  })();

  parrot = new Parrot();

  document.getElementById('scale-factor').innerHTML = parrot.scaleFactor;

  controller.on('handActive', function() {
    return console.log('hand active');
  });

  controller.on('handInactive', function() {
    return console.log('hand inactive');
  });

  controller.on('handActive', _.throttle(function() {
    return parrot.takeOff();
  }, 2000));

  controller.on('handInactive', _.throttle(function() {
    return parrot.land();
  }, 2000));

  controller.on('handLost', function() {
    return parrot.stop();
  });

  controller.on('deviceDisconnected', function() {
    parrot.land();
    return parrot.client.disableEmergency();
  });

  controller.on('frame', function(frame) {
    var hand;
    if (hand = frame.hands[0]) {
      return parrot.setSpeed(hand.pitch() - 0.2, hand.roll());
    }
  });

}).call(this);
