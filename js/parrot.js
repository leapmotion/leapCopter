// Generated by CoffeeScript 1.6.3
(function() {
  var Parrot, arDrone, controller, parrot;

  arDrone = require('ar-drone');

  controller = new Leap.Controller();

  controller.connect();

  controller.use('handHolding');

  controller.use('handActive');

  controller.use('handEntry');

  Parrot = (function() {
    function Parrot() {
      this.state = 'grounded';
      this.client = arDrone.createClient();
      this.scaleFactor = 0.1;
    }

    Parrot.prototype.takeOff = function() {
      if (this.state !== 'grounded') {
        return;
      }
      this.state = 'flying';
      this.client.takeoff();
      return console.log('takeOff');
    };

    Parrot.prototype.land = function() {
      if (this.state !== 'flying') {
        return;
      }
      console.log('land');
      this.state = 'grounded';
      return this.client.land();
    };

    Parrot.prototype.stop = function() {
      return this.client.stop();
    };

    Parrot.prototype.setSpeed = function(pitch, roll) {
      var pitchPercent;
      pitchPercent = Math.abs(pitch / (Math.PI / 2)) * this.scaleFactor;
      console.log('pitch', pitchPercent);
      if (pitch > 0) {
        return this.client.front(pitchPercent);
      } else {
        return this.client.back(pitchPercent);
      }
    };

    return Parrot;

  })();

  parrot = new Parrot();

  controller.on('handActive', function() {
    return console.log('hand active');
  });

  controller.on('handInactive', function() {
    return console.log('hand inactive');
  });

  controller.on('handActive', _.throttle(function() {
    return parrot.takeOff();
  }, 2000));

  controller.on('handInactive', _.throttle(function() {
    return parrot.land();
  }, 2000));

  controller.on('handLost', function() {
    return parrot.stop();
  });

  controller.on('deviceDisconnected', function() {
    console.log('deviceDisconnected');
    parrot.land();
    return parrot.client.disableEmergency();
  });

  controller.on('frame', _.throttle(function(frame) {
    var hand;
    if (hand = frame.hands[0]) {
      return parrot.setSpeed(hand.pitch(), hand.roll());
    }
  }, 500));

}).call(this);
